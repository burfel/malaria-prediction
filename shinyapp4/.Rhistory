library(shiny); runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
shiny::runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
shiny::runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
shiny::runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
shiny::runGitHub("malaria-prediction", "burfel", subdir="shinyapp4", ref="7b291c0")
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
ggplotRegression
glm_both_simple<-function(ptype){
if(input$tabset == "simple" && ptype == "ppercentage"){
glm_simple()
}
else if(input$tabset == "simple" && ptype == "pdensity"){
glm_simple_dens()
}
#   ###########
# else if(input$tabset == "complex" && ptype == "ppercentage"){
#     glm_complex()
#     # call_null()
#   }
# else if(input$tabset == "complex" && ptype == "pdensity"){
#   glm_complex_dens()
# }
###########-- attempts to include two regression plots for the complex model
else if(input$tabset == "complex" && ptype == "ppercentage2" && input$wtype == "white_blood"){
glm_complex()
}
else if(input$tabset == "complex" && ptype == "pdensity2" && input$wtype == "white_blood"){
glm_complex_dens()
}
else if(input$tabset == "complex" && ptype == "ppercentage2" && input$wtype == "counts"){
glm_complex_counts()
}
else if(input$tabset == "complex" && ptype == "pdensity2" && input$wtype == "counts"){
glm_complex_counts_dens()
}
}
ggplotRegression(fit.nona.paras.dens, glm_both_simple("pdensity"), 3000000, "pdensity")
glm_both_simple
ggplotRegression(fit.nona.paras.dens, 0.8, 3000000, "pdensity")
fit = fit.nona.paras.dens
constant = 0.8
limit = 3000000
ptye = "pdensity"
require(ggplot2)
if(ptype == "ppercentage" || ptype == "ppercentage2")
{
xname = "Percentage of parasitemia"
}
ggplotRegression(fit.nona.paras, 0.8, 100, "ppercentage")
require(ggplot2)
if(ptype == "ppercentage" || ptype == "ppercentage2")
{
xname = "Percentage of parasitemia"
}
ptype = "pdensity"
limit
fit
constant
require(ggplot2)
if(ptype == "ppercentage" || ptype == "ppercentage2")
{
xname = "Percentage of parasitemia"
}
else if(ptype == "pdensity" || ptype == "pdensity2"){
xname = "Parasitemia density [1/µl]"
}
if(ptype == "ppercentage" || ptype == "ppercentage2")
{
xname = "Percentage of parasitemia"
}
else if(ptype == "pdensity" || ptype == "pdensity2"){
xname = "Parasitemia density [1/µl]"
}
if(ptype == "ppercentage" || ptype == "ppercentage2"){
xname = "Percentage of parasitemia"
} else if(ptype == "pdensity" || ptype == "pdensity2"){
xname = "Parasitemia density [1/µl]"
}
ggplotRegression(fit.nona.paras.dens, 0.8, 3000000, "pdensity")
fit$model
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1]))
fit$model
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit))
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1))
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
fit$model
fit$model
ggplot(fit$model[, 2:1], aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
ggplot(fit$model[, 2:1], aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point() +
stat_smooth(method = "lm", fullrange=TRUE) +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; \n Slope =",signif(fit$coef[[2]], 5),
"; P-value (F-test) =",signif(summary(fit)$coef[2,4], 5))) +
# annotate("text", x=0.1, y=-0.05, label = "R^2 == 0.78", parse=T) +
# annotate("text", x=0.1, y=-0.06, label = "alpha == 0.00", parse=T) +
# annotate("text", x=0.1, y=-0.07, label = "beta == 0.67", parse=T) +
geom_abline(intercept = constant, slope = 0)
fit$model[, 2:1]
ggplot(fit$model[, 2:1], aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
ggplot(fit$model[, 2:1], aes_string(x = names(fit$model)[1], y = names(fit$model)[2])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point() +
stat_smooth(method = "lm", fullrange=TRUE) +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; \n Slope =",signif(fit$coef[[2]], 5),
"; P-value (F-test) =",signif(summary(fit)$coef[2,4], 5))) +
# annotate("text", x=0.1, y=-0.05, label = "R^2 == 0.78", parse=T) +
# annotate("text", x=0.1, y=-0.06, label = "alpha == 0.00", parse=T) +
# annotate("text", x=0.1, y=-0.07, label = "beta == 0.67", parse=T) +
geom_abline(intercept = constant, slope = 0)
ggplotRegression <- function (fit, constant, limit, ptype) {
require(ggplot2)
if(ptype == "ppercentage" || ptype == "ppercentage2"){
xname = "Percentage of parasitemia"
} else if(ptype == "pdensity" || ptype == "pdensity2"){
xname = "Parasitemia density [1/µl]"
}
ggplot(fit$model[, 2:1], aes_string(x = names(fit$model)[1], y = names(fit$model)[2])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point() +
stat_smooth(method = "lm", fullrange=TRUE) +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; \n Slope =",signif(fit$coef[[2]], 5),
"; P-value (F-test) =",signif(summary(fit)$coef[2,4], 5))) +
# annotate("text", x=0.1, y=-0.05, label = "R^2 == 0.78", parse=T) +
# annotate("text", x=0.1, y=-0.06, label = "alpha == 0.00", parse=T) +
# annotate("text", x=0.1, y=-0.07, label = "beta == 0.67", parse=T) +
geom_abline(intercept = constant, slope = 0)
}
fit.nona.paras$model
fit
head(fit.nona.paras.dens$model)
head(fit.nona.paras$model)
aes_string(x = names(fit$model)[2], y = names(fit$model)[1])
scale_x_continuous(name=xname, limits=c(0,limit))
fit.nona.paras.dens$model
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1))
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
geom_point()
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
# scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
# scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
fit
fit = fit.nona.paras.dens
xname
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
# scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
# scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
fit
fit
fit.nona.paras == fit.nona.paras.dens
fit.nona.paras.dens
fit.nona.paras
fit.nona.paras.dens$model
fit.nona.paras$model
fit.nona.paras.dens$model$`dat.nona$Parasite.density...µl.`
class(fit.nona.paras.dens$model$`dat.nona$Parasite.density...µl.`)
fit.nona.paras.dens$model$`dat.nona$Parasite.density...µl.`<-as.numeric(fit.nona.paras.dens$model$`dat.nona$Parasite.density...µl.`)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
# scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
# scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
fit.nona.paras$model
fit.nona.paras.dens$model
fit$model
fit$model$`dat.nona$Parasite.density...µl.`/100000
fit$model$`dat.nona$Parasite.density...µl.`/10000
plot(fit$model$`dat.nona$outcome`, fit$model$`dat.nona$Parasite.density...µl.`/10000)
plot(fit$model$`dat.nona$outcome`, fit$model$`dat.nona$Parasite.density...µl.`/10000, ylim = c(0, 0.8), xlim = c(0, 125))
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,limit)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
scale_x_continuous(name=xname, limits=c(0,125)) +  ## -- with it pdenstiy does not show up
scale_y_continuous(name="Percentage of reads mapping to pathogen", limits=c(0,1)) +
# scale_size_identity() +
geom_point()
View(dat.nona)
View(dat.nona)
dat.nona$Parasite.density...µl. <- dat.nona$Parasite.density...µl.*100000
runApp('Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
save(fit.nona.paras.dens, file = "../shinyapp4/Rdata/fit_nona_paras_dens.rda")
setwd("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4")
save(fit.nc.nona.paras, file = "../shinyapp4/Rdata/fit_nc_nona_paras.rda")
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
View(dat.nona)
runApp()
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
save(fit.nona.paras.dens, file = "../shinyapp4/Rdata/fit_nona_paras_dens.rda")
runApp()
runApp()
View(dat.nona)
dat.nona$Parasite.clones <- dat.nona$Parasite.density...µl.*100000
View(dat.nona)
dat.nona$Parasite.density...µl. <- dat.nona$Parasite.density...µl.*100000
View(dat.nona)
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
save(fit.nona.paras.dens, file = "../shinyapp4/Rdata/fit_nona_paras_dens.rda")
runApp()
runApp()
View(dat.nc.nona)
#===============================================================================
#                               READ IN DATA                                   #
#===============================================================================
# read in files
hg_pf <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/hg_pf_readcounts.csv")
supp <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/Supplementary_Dataset.csv", header=TRUE)
# merge data sets (by samples/ subjectID)
dat <- merge(supp, hg_pf, by.y = "samples", by.x = "Subject.ID")
# add column "outcome" which gives the proportion of pathogen reads
dat$total_reads <- dat$pf_count + dat$hg_count
dat$outcome <- dat$pf_count / (dat$hg_count + dat$pf_count)
dat$outcome.logit <-  logit(dat$outcome, percents=TRUE)
# most important non-categorical variables
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, outcome))
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Parasite.density...µl., Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, Percentage.neutrophils, outcome))
#dat.nc.logit <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Parasite.density...µl., Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, Percentage.neutrophils, outcome.logit))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Parasite.density...µl., Total.White.Cell.Count..x109.L., Lymphocyte.count...x109.L., Monocyte.count...x109.L., Neutrophil.count...x109.L., Percentage.lymphocytes, Percentage.monocytes, Percentage.neutrophils, hg_count, pf_count, outcome))
dat.nc.logit <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Parasite.density...µl., Total.White.Cell.Count..x109.L., Lymphocyte.count...x109.L., Monocyte.count...x109.L., Neutrophil.count...x109.L., Percentage.lymphocytes, Percentage.monocytes, Percentage.neutrophils, hg_count, pf_count, outcome.logit))
# drop the samples that have blanks
dat.nona <- na.omit(dat) # 21x27 matrix
dat.nc.nona <- na.omit(dat.nc) # 40x13 matrix (added different white cell type counts, hg_count, pf_count)
dat.nc.nona.logit <- na.omit(dat.nc.logit) # 40x13 matrix
View(fit.nona.paras)
View(dat.nona)
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
save(fit.nona.paras.dens, file = "../shinyapp4/Rdata/fit_nona_paras_dens.rda")
runApp()
save(fit.nona.paras.dens, file = "../shinyapp4/Rdata/fit_nona_paras_dens.rda")
load(file = "Rdata/fit_nona_paras_dens.rda")
runApp()
View(dat.nona)
View(dat.nona)
dat.nona$Parasite.density...µl. <- dat.nona$Parasite.density...µl.*100000
View(dat.nona)
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
View(fit.nona.paras.dens)
View(fit.nona.paras.dens)
load(file = "Rdata/dat_nona.rda")
load(file = "Rdata/fit_nona_paras_dens.rda")
load(file = "Rdata/dat_nona.rda")
load(file = "Rdata/fit_nona_paras_dens.rda")
save(fit.nona.paras.dens, file = "../shinyapp4/Rdata/fit_nona_paras_dens.rda")
save(dat.nona, file = "../shinyapp4/Rdata/dat_nona.rda")
#source('../src/databuilder.R', local = TRUE)
load(file = "Rdata/fit_nona_paras.rda")
load(file = "Rdata/dat_nona.rda")
# dat.nona.logit ?
save(dat.nc.nona, file = "../shinyapp4/Rdata/dat_nc_nona.rda")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(references)
glossary <- summary_complex_dens <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/glossary.csv", header=TRUE)
references
glossary <- summary_complex_dens <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/glossary.csv", header=TRUE)
glossary <- summary_complex_dens <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/glossary.csv", header=TRUE)
glossary <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/glossary.csv", header=TRUE)
glossary
glossary <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/glossary.csv", header=TRUE)
glossary <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/references.csv", header=TRUE)
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
glossary <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/references.csv", header=TRUE)
glossary
glossary <- glossary[,1:2]
glossary
sub(".", " ", glossary, fixed = TRUE)
glossary
chartr(".", " ", glossary)
glossary
sub("[.]", " ", "glossary")
sub("[.]", " ", glossary)
glossary
sub("[.]", " ", "glossary")
sub("[.]", " ", glossary)
sub("[.]", " ", glossary)
glossary
View(glossary)
View(references)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shiny")
runApp()
runApp()
