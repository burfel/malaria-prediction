# (2)
fit.nona.total <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$total.number.of.cells, data=dat.nona)
summary(fit.nona.total) # show results: R^2: 0.4622
summary(fit.nona.total)$sigma^2 # estimated variance of residuals around a fitted line: 0.02268394
# (2)
fit.nona.total <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$total.number.of.cells, data=dat.nona)
library(caret)
library(doParallel)
registerDoParallel(detectCores() - 1)
library(caret)
library(doParallel)
registerDoParallel(detectCores() - 1)
setwd("~/Documents/IMPERIAL/PROJECTS/project2")
# read in files
hg_pf <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/hg_pf_readcounts.csv")
supp <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/Supplementary_Dataset.csv", header=TRUE)
# merge data sets (by samples/ subjectID)
dat <- merge(supp, hg_pf, by.y = "samples", by.x = "Subject.ID")
# add column "outcome" which gives the proportion of pathogen reads
dat$outcome <- dat$pf_count / (dat$hg_count + dat$pf_count)
# add column "total.number.of.cells"
dat$total.number.of.cells <- dat$Total.White.Cell.Count..x109.L. + (1000 * dat$Red.blood.cell.count..x1012.L)
# most important non-categorical variables
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L))
# drop the samples that have blanks
dat.nona <- na.omit(dat)
# (1)
fit.nona.paras <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia, data=dat.nona)
summary(fit.nona.paras) # # show results: R^2: 0.4078
summary(fit.nona.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# plot the statistics
par(mfrow = c(2, 2))
plot(fit.nona.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
#par(mfrow = c(1, 1))
hist(fit.nona.paras$res,main="Residuals") # residuals not really Gaussian
# (2)
fit.nona.total <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$total.number.of.cells, data=dat.nona)
summary(fit.nona.total) # show results: R^2: 0.4622
summary(fit.nona.total)$sigma^2 # estimated variance of residuals around a fitted line: 0.02268394
# plot the statistics, OUTLIERS 35, 39 -- both in UM group? -- kept them
par(mfrow = c(2, 2))  # Split the plotting panel into a 2 x 2 grid
plot(fit.nona.total)  # Plot the model information/
# diagnostic plots:
# - residuals do not have non-linear patterns
# - residuals about Normally distributed (except for 35, 39)
# - residuals about homoscedastic
par(mfrow = c(1, 1))  # Return plotting panel to 1 section
hist(fit.nona.total$res,main="Residuals") # residuals not really Gaussian
# PLOT the best linear regression model
library(ggplot2)
ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$total.number.of.cells)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
# Write a function that also returns statistics
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R^2 = ",signif(summary(fit)$adj.r.squared, 5),
#"Mult R^2 = ",signif(summary(fit)$mult.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(fit.nona.paras) # for most simple model (parasitemia percentage)
# Are the residuals of the linear regression model homoscedastic, ie the RVs have the same finite variance?
# SIZE AND COLOR #https://drsimonj.svbtle.com/visualising-residuals
# Same coloring as above, size corresponding as well
d <- dat.nona
d$predicted <- predict(fit.nona.total)
d$residuals <- residuals(fit.nona.total)
library(dplyr)
d %>% select(outcome, predicted, residuals) %>% head() # quick look at the actual, predicted and residual values
#head(d)
# ADD LEGEND HERE
ggplot(d, aes(x = Percentage.parasitemia, y = outcome)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = Percentage.parasitemia, yend = predicted), alpha = .2) +
# > Color AND size adjustments made here...
geom_point(aes(color = abs(residuals), size = abs(residuals))) + # size also mapped
scale_color_continuous(low = "black", high = "red") +
guides(color = FALSE, size = FALSE) +  # Size legend also removed
# <
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
# Let's crank up the complexity! PLOTTING a multiple linear regression model
library(tidyr)
#d2 <- subset(d, select = c(Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, total.number.of.cells, outcome, predicted, residuals))
# just percentage parasetemia, total number of cells
d2 <- subset(d, select = c(Percentage.parasitemia, total.number.of.cells, outcome, predicted, residuals))
d2 %>%
gather(key = "iv", value = "x", -outcome, -predicted, -residuals) %>%  # Get data into shape
ggplot(aes(x = x, y = outcome)) +  # Note use of `x` here and next line
geom_segment(aes(xend = x, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE) +
geom_point(aes(y = predicted), shape = 1) +
facet_grid(~ iv, scales = "free_x") +  # Split panels here by `iv`
theme_bw()
# (2b)
fit.nona.white <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona)
summary(fit.nona.white) # show results: R^2: 0.442
par(mfrow = c(2, 2))
plot(fit.nona.white)
# (3a)
fit.nona.red <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Red.blood.cell.count..x1012.L + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona)
summary(fit.nona.red) # show results: R^2: 0.4671
par(mfrow = c(2, 2))
plot(fit.nona.red)
# (3b)
fit.nona.hemo <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Hemoglobin.concentration..g.dL. + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona)
summary(fit.nona.hemo) # show results: R^2: 0.4527
par(mfrow = c(2, 2))
plot(fit.nona.hemo)
# (1)
fit.nona.paras <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia, data=dat.nona)
summary(fit.nona.paras) # # show results: R^2: 0.4078
summary(fit.nona.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# plot the statistics
par(mfrow = c(2, 2))
plot(fit.nona.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
plot(fit.nona.total)  # Plot the model information/
#--------------------------------------------------------------
#--------------------------------------------------------------
#histogram(dat.nona$outcome ~ dat.nona$Percentage.parasitemia)
barplot(dat$Percentage.parasitemia/100, dat$outcome, xlab = "percentage of parasitemia", ylab = "proportion of parasite reads")
library(ggplot2)
theme_set(theme_bw())
# Draw plot
ggplot(dat, aes(x=Percentage.parasitemia/100, y=outcome)) +
geom_bar(stat="identity", width=.01, fill="tomato3") +
labs(title="Ordered Bar Chart",
subtitle="Make Vs Avg. Mileage",
caption="source: mpg") +
theme(axis.text.x = element_text(angle=65, vjust=0.6))
# PREPROCESSING
##--- TODO: VISUALISE IT NICELY FOR WEBSITE, TO SHOW ON WHICH DATA THE MODEL HAS BEEN TRAINED
summary(dat)
# PREPROCESSING
##--- TODO: VISUALISE IT NICELY FOR WEBSITE, TO SHOW ON WHICH DATA THE MODEL HAS BEEN TRAINED
summary(dat)
install.packages("mice")
library(mice)
md.pattern(dat) # returns a tabular form of missing value present in each variable in a dataset
installed.packages("VIM")
library(VIM)
png("GITHUB/shinyapp/img/missingData.png")
mice_plot <- aggr(dat, col=c('navyblue', 'yellow'), numbers=TRUE, sortVars=TRUE,
labels=names(dat), cex.axis=.7, gap=3, ylab=c("Missing data", "Pattern"))
dev.off()
install.packages("mice")
library(mice)
md.pattern(dat) # returns a tabular form of missing value present in each variable in a dataset
installed.packages("VIM")
library(VIM)
png("GITHUB/shinyapp/img/missingData.png")
mice_plot <- aggr(dat, col=c('navyblue', 'yellow'), numbers=TRUE, sortVars=TRUE,
labels=names(dat), cex.axis=.7, gap=3, ylab=c("Missing data", "Pattern"))
dev.off()
mice_plot <- aggr(dat, col=c('navyblue', 'yellow'), numbers=TRUE, sortVars=TRUE,
labels=names(dat), cex.axis=.7, gap=3, ylab=c("Missing data", "Pattern"))
##--- remove categorical variables
#dat.nc <- subset(dat, select = -c(Sex, Ethnicity, Sickle.cell.screen))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, Parasite.clones, outcome))
imputed_dat <- mice(dat.nc, m=5, maxit=50, method='pmm', seed=500)
summary(imputed_dat)
# get complete data (2nd out of 5 imputed data sets)
completeDat <- complete(imputed_dat, 2)
completeDat
## logistic regression
## GENERALISED LINEAR MODEL, ie robust regression method on the raw, untransformed values
library(ISLR)
glm.fit <- glm(outcome ~ Percentage.parasitemia + Parasite.clones + Total.White.Cell.Count..x109.L., completeDat, family=binomial)
summary(glm.fit)
glm.fit2 <- glm(outcome ~ Percentage.parasitemia + Parasite.clones + Total.White.Cell.Count..x109.L., completeDat, family=quasibinomial())
summary(glm.fit2)
# make predictions on the training data that we use to fit the model
# returns vector of fitted probabilities
glm.probs <- predict(glm.fit, type = "response")
glm.probs[1:5] # look at the first 5 probabilities
library(nnet)
#completeData$Percentage.parasitemia <- relevel(completeData$Percentage.parasitemia, ref = "parasetemia")
test <- multinom(outcome ~ Percentage.parasitemia + Parasite.clones + Total.White.Cell.Count..x109.L., data=completeDat)
summary(test)
z <- summary(test)$coefficients/summary(test)$standard.errors
z
# 2-tailed z test
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
## extract the coefficients from the model and exponentiate
exp(coef(test))
head(pp <- fitted(test))
completeDat2 <- completeDat
completeDat2$Total.Cell.Count <- completeDat$Total.White.Cell.Count..x109.L. + completeDat$Red.blood.cell.count..x1012.L
completeDat2 <- completeDat
completeDat2$Total.Cell.Count <- completeDat$Total.White.Cell.Count..x109.L. + completeDat$Red.blood.cell.count..x1012.L
cor(completeDat[,-1],method="pearson")
cor(completeDat[,-1],method="spearman")
# correlation of whole matrix
la <- dat.nona[,-1,-2]
la <- la[,-1]
la <- la[,-14]
cor(la, method="pearson")
cor(la, method="spearman")
library(corrplot)
## corrplot 0.84 loaded
M <- cor(la, method="pearson")
## corrplot 0.84 loaded
M <- cor(la, method="pearson")
#corrplot(M, method = "square") ### PLOT FOR WEBSITE
#corrplot(M, method = "circle")
#corrplot(M, method = "number")
#corrplot(M, method = "shade")
corrplot(M, method = "color")
Mp <- cor(completeDat2[,-1], method="pearson")
Ms <- cor(completeDat2[,-1], method="spearman")
corrplot(M, order = "AOE") ### PLOT FOR WEBSITE
corrplot(M, order = "hclust")
corrplot(M, order = "FPC")
corrplot(M, order = "alphabet")
corrplot(M, order = "hclust", addrect = 2) !!!!!!!!!
corrplot(Mp, order = "AOE") ### PLOT FOR WEBSITE
corrplot(Mp, order = "hclust")
corrplot(Mp, order = "FPC")
corrplot(Mp, order = "alphabet")
##--- remove categorical variables
#dat.nc <- subset(dat, select = -c(Sex, Ethnicity, Sickle.cell.screen))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, Parasite.clones, outcome))
View(dat)
dat
##--- remove categorical variables
#dat.nc <- subset(dat, select = -c(Sex, Ethnicity, Sickle.cell.screen))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, total.number.of.cells, Total.White.Cell.Count..x109.L., Monocyte.count...x109.L., Lymphocyte.count...x109.L., Red.blood.cell.count..x1012.L, Hemoglobin.concentration..g.dL., Parasite.density...µl., Parasite.clones, outcome))
dat
imputed_dat <- mice(dat.nc, m=5, maxit=50, method='pmm', seed=500)
##--- remove categorical variables
#dat.nc <- subset(dat, select = -c(Sex, Ethnicity, Sickle.cell.screen))
# SINGULAR MATRIX --> CHOOSE LESS VARIABLES
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, total.number.of.cells, Total.White.Cell.Count..x109.L., Monocyte.count...x109.L., Lymphocyte.count...x109.L., Red.blood.cell.count..x1012.L, Hemoglobin.concentration..g.dL., Parasite.density...µl., Parasite.clones, outcome))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, total.number.of.cells, Monocyte.count...x109.L., Lymphocyte.count...x109.L., outcome))
imputed_dat <- mice(dat.nc, m=5, maxit=50, method='pmm', seed=500)
summary(imputed_dat)
# get complete data (2nd out of 5 imputed data sets)
completeDat <- complete(imputed_dat, 2)
completeDat
completeDat2 <- completeDat
completeDat2$Total.Cell.Count <- completeDat$Total.White.Cell.Count..x109.L. + completeDat$Red.blood.cell.count..x1012.L
cor(completeDat[,-1],method="pearson")
cor(completeDat[,-1],method="spearman")
# correlation of whole matrix
la <- dat.nona[,-1,-2]
la <- la[,-1]
la <- la[,-14]
cor(la, method="pearson")
cor(la, method="spearman")
library(corrplot)
## corrplot 0.84 loaded
M <- cor(la, method="pearson")
#corrplot(M, method = "square") ### PLOT FOR WEBSITE
#corrplot(M, method = "circle")
#corrplot(M, method = "number")
#corrplot(M, method = "shade")
corrplot(M, method = "color")
Mp <- cor(completeDat2[,-1], method="pearson")
Ms <- cor(completeDat2[,-1], method="spearman")
library(shiny); runApp('GITHUB/shinyapp2/shinyApp.R')
corrplot(Mp, order = "hclust", addrect = 2)
corrplot(M, order = "hclust", addrect = 2) !!!!!!!!!
corrplot(Mp, order = "AOE") ### PLOT FOR WEBSITE
## corrplot 0.84 loaded
M <- cor(la, method="pearson")
Mp <- cor(completeDat2[,-1], method="pearson")
Ms <- cor(completeDat2[,-1], method="spearman")
corrplot(M, order = "AOE") ### PLOT FOR WEBSITE
corrplot(M, order = "hclust", addrect = 2) # !!!!!!!!!
log.dat <- logit(dat)
?logit
package(car)
library(car)
install.packages("car")
log.dat <- logit(dat)
log.dat <- logit(dat.nc)
log.dat <- logit(dat.nona)
View(dat.nc)
View(dat.nc)
dat.nc.nona <- na.omit(dat.nc)
log.dat <- logit(dat.nc.nona)
View(dat.nc.nona)
View(dat.nc.nona)
log.dat <- logit(dat.nc.nona[,-1])
dat.nc.nona[,-1]
log.dat <- logit(dat.nc.nona[,-1])
log.outcome <- logit(dat.nc.nona$outcome)
log.outcome
dat.nc.nona.log <- dat.nc.nona$outcome
dat.nc.nona.log <- dat.nc.nona
#log.outcome <- logit(dat.nc.nona$outcome)
dat.nc.nona.log <- dat.nc.nona
#log.outcome <- logit(dat.nc.nona$outcome)
dat.nc.nona.log <- dat.nc.nona
dat.nc.nona.log$logit.outcome <- logit(dat.nc.nona$outcome)
View(dat.nc.nona.log)
View(dat.nc.nona.log)
X <- cor(dat.nc.nona[,-1], method="spearman")
corrplot(X, order = "hclust", addrect = 2) # !!!
corrplot(X, order = "hclust", addrect = 2) # !!!
X <- cor(dat.nc.nona[,-1], method="spearman")
corrplot(X, order = "AOE") ### PLOT FOR WEBSITE
X <- cor(dat.nc.nona.log[,-1], method="spearman")
corrplot(X, order = "AOE") ### PLOT FOR WEBSITE
corrplot(X, order = "hclust", addrect = 2) # !!!
runApp('GITHUB/shinyapp2/shinyApp.R')
