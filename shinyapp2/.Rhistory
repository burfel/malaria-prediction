library(caret)
library(doParallel)
registerDoParallel(detectCores() - 1)
setwd("~/Documents/IMPERIAL/PROJECTS/project2")
# read in files
hg_pf <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/hg_pf_readcounts.csv")
supp <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/Supplementary_Dataset.csv", header=TRUE)
# merge data sets (by samples/ subjectID)
dat <- merge(supp, hg_pf, by.y = "samples", by.x = "Subject.ID")
library(car)
# add column "outcome" which gives the proportion of pathogen reads
dat$outcome <- dat$pf_count / (dat$hg_count + dat$pf_count)
dat$outcome.logit <-  logit(dat$outcome, percents=TRUE)
# add column "total.number.of.cells"
dat$total.number.of.cells <- dat$Total.White.Cell.Count..x109.L. + (1000 * dat$Red.blood.cell.count..x1012.L)
# most important non-categorical variables
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, outcome))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., outcome))
# drop the samples that have blanks
dat.nona <- na.omit(dat) # ONLY 21 OBSERVATIONS ANYMORE
dat.nc.nona <- na.omit(dat.nc)
# (1)
fit.nona.paras <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia, data=dat.nona)
summary(fit.nona.paras) # # show results: R^2: 0.4078
summary(fit.nona.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# plot the statistics
par(mfrow = c(2, 2))
plot(fit.nona.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
#par(mfrow = c(1, 1))
hist(fit.nona.paras$res,main="Residuals") # residuals not really Gaussian
# with logit transformation
fit.nona.paras.log <- lm(dat.nc.nona$outcome.logit ~ dat.nc.nona$Percentage.parasitemia, data=dat.nc.nona)
summary(fit.nona.paras.log) # # show results: R^2: 0.4078
summary(fit.nona.paras.log)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# plot the statistics
par(mfrow = c(2, 2))
plot(fit.nona.paras.log) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
#par(mfrow = c(1, 1))
hist(fit.nona.paras.log$res,main="Residuals") # residuals not really Gaussian
# (2)
fit.nona.total <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$total.number.of.cells, data=dat.nona)
summary(fit.nona.total) # show results: R^2: 0.4622
summary(fit.nona.total)$sigma^2 # estimated variance of residuals around a fitted line: 0.02268394
# plot the statistics, OUTLIERS 35, 39 -- both in UM group? -- kept them -- BUT MIGHT BE WORTH TRYING WITHOUT THEM
par(mfrow = c(2, 2))  # Split the plotting panel into a 2 x 2 grid
plot(fit.nona.total)  # Plot the model information/
# diagnostic plots to CHECK ASSUMPTIONS FOR LINEAR REGRESSION:
# - residuals do not have non-linear patterns
# - residuals about Normally distributed (except for 35, 39)
# - residuals about homoscedastic
# - residuals still within Cook distance (but you can see the dotted lines)
par(mfrow = c(1, 1))  # Return plotting panel to 1 section
hist(fit.nona.total$res,main="Residuals") # residuals not really Gaussian
# PLOT the best linear regression model
library(ggplot2)
ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$total.number.of.cells)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
# Write a function that also returns statistics
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R^2 = ",signif(summary(fit)$adj.r.squared, 5),
#"Mult R^2 = ",signif(summary(fit)$mult.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
ggplotRegression(fit.nona.paras) # for most simple model (parasitemia percentage)
# Are the residuals of the linear regression model homoscedastic, ie the RVs have the same finite variance?
# SIZE AND COLOR #https://drsimonj.svbtle.com/visualising-residuals
# Same coloring as above, size corresponding as well
d <- dat.nona
d$predicted <- predict(fit.nona.total)
d$residuals <- residuals(fit.nona.total)
library(dplyr)
d %>% select(outcome, predicted, residuals) %>% head() # quick look at the actual, predicted and residual values
#head(d)
# ADD LEGEND HERE
ggplot(d, aes(x = Percentage.parasitemia, y = outcome)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = Percentage.parasitemia, yend = predicted), alpha = .2) +
# > Color AND size adjustments made here...
geom_point(aes(color = abs(residuals), size = abs(residuals))) + # size also mapped
scale_color_continuous(low = "black", high = "red") +
guides(color = FALSE, size = FALSE) +  # Size legend also removed
# <
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
# Let's crank up the complexity! PLOTTING a multiple linear regression model
library(tidyr)
#d2 <- subset(d, select = c(Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, total.number.of.cells, outcome, predicted, residuals))
# just percentage parasetemia, total number of cells
d2 <- subset(d, select = c(Percentage.parasitemia, total.number.of.cells, outcome, predicted, residuals))
d2 %>%
gather(key = "iv", value = "x", -outcome, -predicted, -residuals) %>%  # Get data into shape
ggplot(aes(x = x, y = outcome)) +  # Note use of `x` here and next line
geom_segment(aes(xend = x, yend = predicted), alpha = .2) +
geom_point(aes(color = residuals)) +
scale_color_gradient2(low = "blue", mid = "white", high = "red") +
guides(color = FALSE) +
geom_point(aes(y = predicted), shape = 1) +
facet_grid(~ iv, scales = "free_x") +  # Split panels here by `iv`
theme_bw()
# (2b)
fit.nona.white <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona)
summary(fit.nona.white) # show results: R^2: 0.442
par(mfrow = c(2, 2))
plot(fit.nona.white)
# (3a)
fit.nona.red <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Red.blood.cell.count..x1012.L + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona)
summary(fit.nona.red) # show results: R^2: 0.4671
par(mfrow = c(2, 2))
plot(fit.nona.red)
# (3b)
fit.nona.hemo <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Hemoglobin.concentration..g.dL. + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona)
summary(fit.nona.hemo) # show results: R^2: 0.4527
par(mfrow = c(2, 2))
plot(fit.nona.hemo)
######--------------------------------NO LONGER NECESSARY--------------------------------------------------
# Other useful functions
coefficients(fit) # model coefficients
confint(fit, level=0.95) # CIs for model parameters
fitted(fit) # predicted values
residuals(fit) # residuals
anova(fit) # anova table
vcov(fit) # covariance matrix for model parameters
influence(fit) # regression diagnostics
#---DIAGNOSTIC PLOTS---------------
# to check for heteroscedasticity, normality, and influential observerations
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
library(caret)
library(doParallel)
registerDoParallel(detectCores() - 1)
setwd("~/Documents/IMPERIAL/PROJECTS/project2")
# read in files
hg_pf <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/hg_pf_readcounts.csv")
supp <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/Supplementary_Dataset.csv", header=TRUE)
# merge data sets (by samples/ subjectID)
dat <- merge(supp, hg_pf, by.y = "samples", by.x = "Subject.ID")
# add column "outcome" which gives the proportion of pathogen reads
dat$outcome <- dat$pf_count / (dat$hg_count + dat$pf_count)
# most important non-categorical variables
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L))
# drop the samples that have blanks
dat.nona <- na.omit(dat)
#-----------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------
# 0. Impute missing values
library(Amelia)
library(mlbench)
## visualise missing values
png("GITHUB/shinyapp/img/missingMap.png")
library(caret)
library(doParallel)
registerDoParallel(detectCores() - 1)
setwd("~/Documents/IMPERIAL/PROJECTS/project2")
# read in files
hg_pf <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/hg_pf_readcounts.csv")
supp <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/Supplementary_Dataset.csv", header=TRUE)
# merge data sets (by samples/ subjectID)
dat <- merge(supp, hg_pf, by.y = "samples", by.x = "Subject.ID")
library(car)
# add column "outcome" which gives the proportion of pathogen reads
dat$outcome <- dat$pf_count / (dat$hg_count + dat$pf_count)
dat$outcome.logit <-  logit(dat$outcome, percents=TRUE)
# add column "total.number.of.cells"
dat$total.number.of.cells <- dat$Total.White.Cell.Count..x109.L. + (1000 * dat$Red.blood.cell.count..x1012.L)
# most important non-categorical variables
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, outcome))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., outcome))
# drop the samples that have blanks
dat.nona <- na.omit(dat) # ONLY 21 OBSERVATIONS ANYMORE
dat.nc.nona <- na.omit(dat.nc)
# (1)
fit.nona.paras <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia, data=dat.nona)
# (1)
fit.nona.paras <- lm(dat$outcome ~ dat$Percentage.parasitemia, data=dat)
summary(fit.paras) # # show results: R^2: 0.4078
# (1)
fit.paras <- lm(dat$outcome ~ dat$Percentage.parasitemia, data=dat)
summary(fit.paras) # # show results: R^2: 0.4078
summary(fit.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# plot the statistics
par(mfrow = c(2, 2))
plot(fit.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
#par(mfrow = c(1, 1))
hist(fit.paras$res, main="Residuals") # residuals not really Gaussian
# (1)
fit.paras <- lm(dat$outcome ~ dat$Percentage.parasitemia, data=dat)
summary(fit.paras) # # show results: R^2: 0.4078
summary(fit.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# plot the statistics
par(mfrow = c(2, 2))
plot(fit.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
#par(mfrow = c(1, 1))
hist(fit.paras$res, main="Residuals") # residuals not really Gaussian
plot(fit.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
summary(fit.paras) # # show results: R^2: 0.4078
# (1)
fit.nona.paras <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia, data=dat.nona)
summary(fit.nona.paras) # # show results: R^2: 0.4078
summary(fit.nona.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# with logit transformation ON NONA DATA
fit.nona.paras.log <- lm(dat.nona$outcome.logit ~ dat.nona$Percentage.parasitemia, data=dat.nona)
summary(fit.nona.paras.log) # # show results: R^2: 0.4078
summary(fit.nona.paras.log)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# plot the statistics
par(mfrow = c(2, 2))
plot(fit.nona.paras.log) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
#par(mfrow = c(1, 1))
hist(fit.nona.paras.log$res,main="Residuals") # residuals not really Gaussian
View(dat)
View(dat)
View(dat.nona)
View(dat.nona)
library(corrplot)
## corrplot 0.84 loaded
M <- cor(la, method="pearson")
png("GITHUB/shinyapp/img/ParasitDensity_imp.png")
para2 <- density(completeDat$Percentage.parasitemia) # returns the density data
plot(para2) # plots the results
dev.off()
png("GITHUB/shinyapp/img/WhiteCellDensity_imp.png")
wcc2 <- density(completeDat$Total.White.Cell.Count..x109.L.)
plot(wcc2)
dev.off()
png("GITHUB/shinyapp/img/RedCellDensity_imp.png")
rcc2 <- density(completeDat$Red.blood.cell.count..x1012.L)
plot(rcc2)
dev.off()
# boxplot
png("GITHUB/shinyapp/img/boxplot_imp.png")
par(mfrow=c(2,5))
for(i in 2:5) {
boxplot(completeDat[,i], main=names(completeDat)[i])
}
dev.off()
# histogram
png("GITHUB/shinyapp/img/hist_imp.png")
par(mfrow=c(2,5))
for(i in 2:5) {
hist(completeDat[,i], main=names(completeDat)[i])
}
dev.off()
completeDat2 <- completeDat
completeDat2$Total.Cell.Count <- completeDat$Total.White.Cell.Count..x109.L. + completeDat$Red.blood.cell.count..x1012.L
cor(completeDat[,-1],method="pearson")
cor(completeDat[,-1],method="spearman")
# correlation of whole matrix
la <- dat.nona[,-1,-2]
la <- la[,-1]
la <- la[,-14]
cor(la, method="pearson")
cor(la, method="spearman")
library(corrplot)
## corrplot 0.84 loaded
M <- cor(la, method="pearson")
#corrplot(M, method = "square") ### PLOT FOR WEBSITE
#corrplot(M, method = "circle")
#corrplot(M, method = "number")
#corrplot(M, method = "shade")
corrplot(M, method = "color")
Mp <- cor(completeDat2[,-1], method="pearson")
Ms <- cor(completeDat2[,-1], method="spearman")
corrplot(M, order = "AOE") ### PLOT FOR WEBSITE
corrplot(M, order = "hclust")
corrplot(M, order = "FPC")
corrplot(M, order = "alphabet")
corrplot(M, order = "hclust", addrect = 2) # !!!!!!!!!
corrplot(M, order = "hclust", addrect = 2) # !!!!!!!!!
View(dat)
View(dat)
View(dat.nc)
View(dat.nc)
# most important non-categorical variables
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, outcome))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, outcome))
dat.nc.logit <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, outcome.logit))
View(dat.nc.logit)
View(dat.nc.logit)
View(dat.nc)
View(dat.nc)
# merge data sets (by samples/ subjectID)
dat <- merge(supp, hg_pf, by.y = "samples", by.x = "Subject.ID")
library(car)
# add column "outcome" which gives the proportion of pathogen reads
dat$outcome <- dat$pf_count / (dat$hg_count + dat$pf_count)
dat$outcome.logit <-  logit(dat$outcome, percents=TRUE)
# add column "total.number.of.cells"
dat$total.number.of.cells <- dat$Total.White.Cell.Count..x109.L. + (1000 * dat$Red.blood.cell.count..x1012.L)
# most important non-categorical variables
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, outcome))
dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, outcome))
dat.nc.logit <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, outcome.logit))
# drop the samples that have blanks
dat.nona <- na.omit(dat) # ONLY 21 OBSERVATIONS ANYMORE
dat.nc.nona <- na.omit(dat.nc)
dat.nc.nona.logit <- na.omit(dat.nc.logit)
# (1) SIMPLEST MODEL (JUST PARASITEMIA), WITHOUT TRANSFORMATION, ON WHOLE DATASET
fit.paras <- lm(dat$outcome ~ dat$Percentage.parasitemia, data=dat)
corrplot(M, order = "hclust", addrect = 2) # !!!!!!!!!
library(shiny); runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
ggplotRegression(fit.nona.paras) # for most simple model (parasitemia percentage)
# (2)
fit.nona.total <- lm(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$total.number.of.cells, data=dat.nona)
summary(fit.nona.total) # show results: R^2: 0.4622
summary(fit.nona.total)$sigma^2 # estimated variance of residuals around a fitted line: 0.02268394
# plot the statistics, OUTLIERS 35, 39 -- both in UM group? -- kept them -- BUT MIGHT BE WORTH TRYING WITHOUT THEM
par(mfrow = c(2, 2))  # Split the plotting panel into a 2 x 2 grid
plot(fit.nona.total)  # Plot the model information/
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
# add column "total.number.of.cells"
dat$total.number.of.cells <- dat$Total.White.Cell.Count..x109.L. + (1000 * dat$Red.blood.cell.count..x1012.L)
# (1) SIMPLEST MODEL (JUST PARASITEMIA), WITHOUT TRANSFORMATION, ON WHOLE DATASET
fit.paras <- lm(dat$outcome ~ dat$Percentage.parasitemia, data=dat)
summary(fit.paras) # # show results: R^2: 0.4078
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
source('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
runApp('GITHUB/shinyapp2/shinyApp.R')
