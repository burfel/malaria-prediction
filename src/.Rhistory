# plot(glm.neutro.logit)
# # MODEL.log: -2.581e+00 + 7.341e-02*dat.nona$Percentage.parasitemia + 8.204e-03*dat.nona$Percentage.neutrophils
#
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# glm.neutro.logit <- glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia + dat.nona$Percentage.neutrophils, family=binomial(link = 'logit'), data=dat.nona)
# summary(glm.neutro.logit)
# par(mfrow = c(2, 2))
# plot(glm.neutro.logit)
# # MODEL.log: -2.581e+00 + 7.341e-02*dat.nona$Percentage.parasitemia + 8.204e-03*dat.nona$Percentage.neutrophils
#
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# par(mfrow = c(2, 2))
# summary(glm.neutro.logit)
# par(mfrow = c(2, 2))
# plot(glm.neutro.logit)
# # MODEL.log: -2.581e+00 + 7.341e-02*dat.nona$Percentage.parasitemia + 8.204e-03*dat.nona$Percentage.neutrophils
#
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# par(mfrow = c(2, 2))
# plot(glm.neutro.dens)
# par(mfrow = c(2, 2))
# plot(glm.neutro.logit)
# # MODEL.log: -2.581e+00 + 7.341e-02*dat.nona$Percentage.parasitemia + 8.204e-03*dat.nona$Percentage.neutrophils
#
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# par(mfrow = c(2, 2))
# plot(glm.neutro.dens)
# # MODEL: -2.238e+00 + 2.106e-06*dat.nona$Parasite.density...µl. + 3.036e-03*dat.nona$Percentage.neutrophils
# plot(glm.neutro.logit)
# # MODEL.log: -2.581e+00 + 7.341e-02*dat.nona$Percentage.parasitemia + 8.204e-03*dat.nona$Percentage.neutrophils
#
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# par(mfrow = c(2, 2))
# plot(glm.neutro.dens)
# # MODEL: -2.238e+00 + 2.106e-06*dat.nona$Parasite.density...µl. + 3.036e-03*dat.nona$Percentage.neutrophils
# glm.neutro.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=binomial(link = 'logit'), data=dat.nona)
# # MODEL.log: -2.581e+00 + 7.341e-02*dat.nona$Percentage.parasitemia + 8.204e-03*dat.nona$Percentage.neutrophils
#
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# par(mfrow = c(2, 2))
# plot(glm.neutro.dens)
# # MODEL: -2.238e+00 + 2.106e-06*dat.nona$Parasite.density...µl. + 3.036e-03*dat.nona$Percentage.neutrophils
# glm.neutro.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=binomial(link = 'logit'), data=dat.nona)
# summary(glm.neutro.dens.logit)
#
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# par(mfrow = c(2, 2))
# plot(glm.neutro.dens)
# # MODEL: -2.238e+00 + 2.106e-06*dat.nona$Parasite.density...µl. + 3.036e-03*dat.nona$Percentage.neutrophils
# glm.neutro.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=binomial(link = 'logit'), data=dat.nona)
# summary(glm.neutro.dens.logit)
# par(mfrow = c(2, 2))
# # (2b) GLM COMPLEX | DENSITY | NEUTRO
# glm.neutro.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=quasibinomial, data=dat.nona)
# summary(glm.neutro.dens)
# par(mfrow = c(2, 2))
# plot(glm.neutro.dens)
# # MODEL: -2.238e+00 + 2.106e-06*dat.nona$Parasite.density...µl. + 3.036e-03*dat.nona$Percentage.neutrophils
# glm.neutro.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Percentage.neutrophils, family=binomial(link = 'logit'), data=dat.nona)
# summary(glm.neutro.dens.logit)
# par(mfrow = c(2, 2))
# plot(glm.neutro.dens.logit)
#
#
# #===============================================================================
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
# #===============================================================================
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# #                      MODEL COMPARISON                                        #
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# # # run the two models MODEL1, MODEL2
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# # par(mfrow = c(1, 2))
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# # par(mfrow = c(1, 2))
# # # use the predict() function to create the fitted y values
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# # par(mfrow = c(1, 2))
# # # use the predict() function to create the fitted y values
# # ## 1. parsitemia
# #===============================================================================
# # MODEL COMPARISON
# # We now can compare the two models as before using ANOVA. In the case of binary data, we need to do a Chi-squared test.
# anova(glm_paras2, glm_total2, test = "Chi")
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# # par(mfrow = c(1, 2))
# # # use the predict() function to create the fitted y values
# # ## 1. parsitemia
# # # create a sequence of x values
# # xv <- seq(0, 9, 0.01)
# #anova(glm_paras_logit, glm_total_logit, test = "Chi")
# anova(glm_paras2, glm_total2, test = "Chi")
#
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# # par(mfrow = c(1, 2))
# # # use the predict() function to create the fitted y values
# # ## 1. parsitemia
# # # create a sequence of x values
#
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# # par(mfrow = c(1, 2))
# # # use the predict() function to create the fitted y values
# # ## 1. parsitemia
# # # create a sequence of x values
# # xv <- seq(0, 9, 0.01)
# # # y values
#
# # # run the two models MODEL1, MODEL2
# # # set up a two-panel plotting area
# # par(mfrow = c(1, 2))
# # # use the predict() function to create the fitted y values
# # ## 1. parsitemia
# # # create a sequence of x values
# # xv <- seq(0, 9, 0.01)
# # # y values
# # yv <- predict(glm_paras, list(area = xv), type = "response")
# GLM REGRESSION LINE
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
install.packages("plotly")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
getwd()
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
ggplotRegression <- function (fit, constant) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5)))
+ geom_abline(intercept = constant, slope = 0)
}
ggplotRegression(fit.nona.paras, 0.8)
ggplotRegression <- function (fit, constant) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5)))
# + geom_abline(intercept = constant, slope = 0)
}
ggplotRegression(fit.nona.paras, 0.8)
ggplotRegression <- function (fit, constant) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5))) +
geom_abline(intercept = constant, slope = 0)
}
ggplotRegression(fit.nona.paras, 0.8)
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
install.packages("ggplotly")
install.packages("ggplot2")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
#===============================================================================
#                      SAVE MODELS                                             #
#===============================================================================
save(fit.nona.paras, file = "../shinyapp4/Rdata/fit_nona_paras.rda")
ggplotRegression <- function (fit, constant) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5))) +
geom_abline(intercept = constant, slope = 0)
}
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
#png("shinyapp2/img/pathogen_read_density.png")
plot(density(dat$outcome), main="Percentage of reads that map to pathogen", ylab="Density", sub=paste("Skewness:", round(e1071::skewness(dat$outcome), 2)))  # density plot for 'speed'
#===============================================================================
#                      PLOTS to explore relationships                          #
#===============================================================================
# PLOT PROPORTION OF PATHOGEN READS, BOTH AS NORMAL AND A LOG SCALE -- FOR WEBSITE
par(mfrow = c(1, 1))
setwd("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/src")
# PLOT --- FOR WEBSITE
library(e1071)
png("shinyapp4/img/pathogen_read_density.png")
plot(density(dat$outcome), main="Percentage of reads that map to pathogen", ylab="Density", sub=paste("Skewness:", round(e1071::skewness(dat$outcome), 2)))  # density plot for 'speed'
polygon(density(dat$outcome), col="red")
# PLOT --- FOR WEBSITE
library(e1071)
png("shinyapp4/img/pathogen_read_density.png")
plot(density(dat$outcome), main="Percentage of reads that map to pathogen", ylab="Density", sub=paste("Skewness:", round(e1071::skewness(dat$outcome), 2)))  # density plot for 'speed'
polygon(density(dat$outcome), col="red")
plot(density(dat$outcome), main="Percentage of reads that map to pathogen", ylab="Density" #, sub=paste("Skewness:", round(e1071::skewness(dat$outcome), 2))
)  # density plot for 'speed'
# PLOT --- FOR WEBSITE
library(e1071)
png("shinyapp4/img/pathogen_read_density.png")
plot(density(dat$outcome), main="Percentage of reads that map to pathogen", ylab="Density" #, sub=paste("Skewness:", round(e1071::skewness(dat$outcome), 2))
)  # density plot for 'speed'
polygon(density(dat$outcome), col="red")
# PLOT --- FOR WEBSITE
library(e1071)
png("shinyapp4/img/pathogen_read_density.png")
plot(density(dat$outcome), main="Percentage of reads that map to pathogen", ylab="Density" #, sub=paste("Skewness:", round(e1071::skewness(dat$outcome), 2))
)  # density plot for 'speed'
polygon(density(dat$outcome), col="red")
dev.off()
# PLOT --- FOR WEBSITE
library(e1071)
png("img/pathogen_read_density.png")
plot(density(dat$outcome), main="Percentage of reads that map to pathogen", ylab="Density" #, sub=paste("Skewness:", round(e1071::skewness(dat$outcome), 2))
)  # density plot for 'speed'
polygon(density(dat$outcome), col="red")
dev.off()
ggdensity(dat$outcome,
main = "Density plot of pathogen reads",
xlab = "Percentage of reads that map to pathogen")
# PLOTS: IS RESPONSE VARIABLE CLOSE TO NORMALITY?
library("ggpubr")
# PLOTS: IS RESPONSE VARIABLE CLOSE TO NORMALITY?
library("ggpubr")
png("img/pathogen_read_density.png")
ggdensity(dat$outcome,
main = "Density plot of pathogen reads",
xlab = "Percentage of reads that map to pathogen",
ylab = "Density/ quantity of reads")
dev.off()
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/shinyApp.R')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
First install the following packages:
library(shiny)
library(ggExtra)
library(ggplot2)
library(shinythemes)
library(rmarkdown)
library(plotly)
### run the application:
shiny::runGitHub("malaria-prediction", "burfel", subdir="shinyapp4")
First install the following packages:
library(shiny)
library(ggExtra)
library(ggplot2)
library(shinythemes)
library(rmarkdown)
library(plotly)
### run the application:
shiny::runGitHub("malaria-prediction", "burfel", subdir="shinyapp4")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
save(dat.nona, file = "../shinyapp4/Rdata/dat_nona.rda")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
# # fit.paras <- lm(dat$outcome ~ dat$Parasite.density...µl., data=dat)
# # summary(fit.paras) # # show results: R^2: 0.367, F-stats: 25.38
# # #summary(fit.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# # # plot the statistics
# # par(mfrow = c(2, 2))
# # plot(fit.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
# # #par(mfrow = c(1, 1))
# # #hist(fit.paras$res, main="Residuals") # residuals not really Gaussian
# #
# (1) SIMPLEST MODEL (JUST PARASITEMIA), DENSITY, WITHOUT TRANSFORMATION, ON COMPLETE SAMPLES
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
save(fit.nona.para.dens, file = "../shinyapp4/Rdata/dat_nona.rda")
save(fit.nona.para.dens, file = "../shinyapp4/Rdata/dat_nona_para_dens.rda")
View(fit.nona.paras.dens)
# # fit.paras <- lm(dat$outcome ~ dat$Parasite.density...µl., data=dat)
# # summary(fit.paras) # # show results: R^2: 0.367, F-stats: 25.38
# # #summary(fit.paras)$sigma^2 # estimated variance of residuals around a fitted line: 0.02366394
# # # plot the statistics
# # par(mfrow = c(2, 2))
# # plot(fit.paras) # diagnostic plots: residuals do not have non-linear patterns, about Normally distributed (except for 35, 39)
# # #par(mfrow = c(1, 1))
# # #hist(fit.paras$res, main="Residuals") # residuals not really Gaussian
# #
# # (1) SIMPLEST MODEL (JUST PARASITEMIA), DENSITY, WITHOUT TRANSFORMATION, ON COMPLETE SAMPLES
fit.nona.paras.dens <- lm(dat.nona$outcome ~ dat.nona$Parasite.density...µl., data=dat.nona)
save(fit.nona.para.dens, file = "../shinyapp4/Rdata/fit_nona_para_dens.rda")
View(fit.nona.paras.dens)
save(fit.nona.paras.dens, file = "../shinyapp4/Rdata/fit_nona_para_dens.rda")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
#source('../src/databuilder.R', local = TRUE)
load(file = "Rdata/fit_nona_paras.rda")
load(file = "Rdata/dat_nona.rda")
load(file = "Rdata/fit_nona_paras.rdna")
#source('../src/databuilder.R', local = TRUE)
load(file = "Rdata/fit_nona_paras.rda")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
#source('../src/databuilder.R', local = TRUE)
load(file = "Rdata/fit_nona_paras.rda")
load(file = "Rdata/dat_nona.rda")
load(file = "Rdata/fit_nona_paras.rda")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
# # File containing unique geo codes, state,city, zip
dummy <- read.csv("dummy.csv", header = TRUE)
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
dummy <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/dummy.csv", header=TRUE)
dummy <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/dummy.csv", header=TRUE)
# merge data sets (by samples/ subjectID)
dat <- merge(supp, hg_pf, by.y = "samples", by.x = "Subject.ID")
dummy <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/dummy.csv", header=TRUE)
save(dummy, file = "../shinyapp4/Rdata/dummy.rda")
load(file = "Rdata/dummy.rda")
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
load("~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4/Rdata/dummy.rda")
View(dummy)
View(dummy)
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
summary(fit.nona.paras)
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
summary(fit.nona.paras.dens)
# (1) GLM SIMPLE | DENSITY
glm.paras.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=quasibinomial, data=dat.nona)
summary(glm.paras.dens)
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
