#
# # ##########################################
# # library(lmtest)
# # bptest(fit.nona.paras)
# # bptest(fit.nona.total)
#
# #####-------- MULTINOMIAL MODEL
# library(nnet)
# #multinom
#
# # ##########################################
# #
# # bptest(fit.nona.paras)
# # bptest(fit.nona.total)
#
# #####-------- MULTINOMIAL MODEL
# library(nnet)
# #multinom
#
# # ##########################################
# #
# # # PLOT the best linear regression model
# # bptest(fit.nona.total)
#
# #####-------- MULTINOMIAL MODEL
# library(nnet)
# #multinom
#
# # ##########################################
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
#
# #####-------- MULTINOMIAL MODEL
# library(nnet)
# #multinom
#
# # ##########################################
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #####-------- MULTINOMIAL MODEL
# library(nnet)
# #multinom
#
# # ##########################################
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# library(nnet)
# #multinom
#
# # ##########################################
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #multinom
#
# # ##########################################
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
#
# # ##########################################
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # ##########################################
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
# #
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# # # PLOT the best linear regression model
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# #
# # library(ggplot2)
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# #
# # # ggplotRegression2 <- function (fit) {
# # ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# #
# # # ggplotRegression2 <- function (fit) {
# # #
# #   geom_point() +
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# #
# # # ggplotRegression2 <- function (fit) {
# # #
# # #   require(ggplot2)
# #   stat_smooth(method = "lm", col = "red")
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# #
# # # ggplotRegression2 <- function (fit) {
# # #
# # #   require(ggplot2)
# # #
# #
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# #
# # # ggplotRegression2 <- function (fit) {
# # #
# # #   require(ggplot2)
# # #
# # #   ggplot(fit$model, aes_string(x = names(fit$model)[3], y = names(fit$model)[1])) +
# # # ADJUST NAMES OF AXES!!!!
# # # Write a function that also returns statistics
#
# #
# # # ggplotRegression2 <- function (fit) {
# # #
# # #   require(ggplot2)
# # #
# # #   ggplot(fit$model, aes_string(x = names(fit$model)[3], y = names(fit$model)[1])) +
# # #            geom_point() +
# # # Write a function that also returns statistics
#
# #
# # # ggplotRegression2 <- function (fit) {
# # #
# # #   require(ggplot2)
# # #
# # #   ggplot(fit$model, aes_string(x = names(fit$model)[3], y = names(fit$model)[1])) +
# # #            geom_point() +
# # #            stat_smooth(method = "lm", col = "red") +
plot(glm.paras)
plot(glm.paras)
plot(glm.paras)
par(mfrow = c(2, 2))
plot(glm.paras)
ggplotRegression(glm.paras)
plot(outcome_prop, dat.nona$Percentage.parasitemia)
plot(outcome, dat.nona$Percentage.parasitemia)
plot(dat.nona$outcome, dat.nona$Percentage.parasitemia)
lines(log(outcome),glm.paras$fit)
lines(log(dat.nona$outcome),glm.paras$fit)
plot(dat.nona$outcome, dat.nona$Percentage.parasitemia)
lines(log(dat.nona$outcome),glm.paras$fit)
par(mfrow = c(1, 1))
plot(dat.nona$outcome, dat.nona$Percentage.parasitemia)
lines(log(dat.nona$outcome),glm.paras$fit)
# png("shinyapp2/img/glm_paras_logit_regression.png")
# #predict gives the predicted value in terms of logits
plot.glm.paras.logit <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
# #convert those logit values to probabilities
# plot.glm.paras.logit$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
#
library(ggplot2)
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
# png("shinyapp2/img/glm_paras_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.logit <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras$fit_prob <- plot.glm.paras$fit
library(ggplot2)
ggplot(plot.glm, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
library(ggplot2)
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
library(ggplot2)
ggplot(plot.glm.paras, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
# (1) GLM SIMPLE | PERCENTAGE
glm.paras <- glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia, family=quasibinomial, data=dat.nona)
summary(glm.paras)
par(mfrow = c(2, 2))
plot(glm.paras)
# MODEL: -1.96396 + 0.06550*dat.nona$Percentage.parasitemia
glm.paras.logit <- glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia, family=binomial(link = 'logit'), data=dat.nona)
summary(glm.paras.logit)
par(mfrow = c(2, 2))
plot(glm.paras.logit)
# png("shinyapp2/img/glm_paras_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.logit <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras$fit_prob <- plot.glm.paras$fit
#convert those logit values to probabilities
plot.glm.paras$fit_prob <- glm.paras$fit
# png("shinyapp2/img/glm_paras_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.logit <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.logit$fit_prob <- plot.glm.paras.logit$fit
library(ggplot2)
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
# DO WE NEED LOGIT TRANSFORMATION?
model <- glm(outcome_prop ~ dat$total_reads, family=binomial, data=dat.nona)
summary(model)
model_log <- glm(outcome_prop ~ log(dat$total_reads), family=binomial, data=dat.nona)
summary(model_log) ## ---> LOGIT TRANSFORMATION / LOGIT LINK NOT NECESSARY
# (1) GLM SIMPLE | PERCENTAGE
glm.paras <- glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia, family=quasibinomial, data=dat.nona)
summary(glm.paras)
par(mfrow = c(2, 2))
plot(glm.paras)
# MODEL: -1.96396 + 0.06550*dat.nona$Percentage.parasitemia
glm.paras.logit <- glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia, family=binomial(link = 'logit'), data=dat.nona)
summary(glm.paras.logit)
par(mfrow = c(2, 2))
plot(glm.paras.logit)
# png("shinyapp2/img/glm_paras_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.logit <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.logit$fit_prob <- plot.glm.paras.logit$fit
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
plot(dat.nona$outcome, dat.nona$Percentage.parasitemia)
lines(log(dat.nona$outcome),glm.paras$fit)
plot(dat.nona$outcome, dat.nona$Percentage.parasitemia)
lines(log(dat.nona$outcome),glm.paras$fit)
plot(dat.nona$outcome, dat.nona$Percentage.parasitemia)
lines(log(dat.nona$outcome),glm.paras$fitted.values)
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras)))
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
# # bptest(fit.nona.paras)
# # bptest(fit.nona.total)
#
# #####-------- MULTINOMIAL MODEL
# library(nnet)
# #multinom
#
# # ##########################################
# #
# # # PLOT the best linear regression model
library(ggplot2)
ggplot(dat.nona, aes(x = dat.nona$Percentage.parasitemia, y = dat.nona$Total.White.Cell.Count..x109.L.)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(d, aes(x = Percentage.parasitemia, y = outcome)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = Percentage.parasitemia, yend = predicted), alpha = .2) +
# > Color AND size adjustments made here...
geom_point(aes(color = abs(residuals), size = abs(residuals))) + # size also mapped
scale_color_continuous(low = "black", high = "red") +
guides(color = FALSE, size = FALSE) +  # Size legend also removed
# <
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
# #
# # ggplotRegression(fit.nona.paras) # for most simple model (parasitemia percentage)
# # #par(new=TRUE)
# # #ggplotRegression(fit.nona.total) # the same plot
# #
# # # Are the residuals of the linear regression model homoscedastic, ie the RVs have the same finite variance?
# # # SIZE AND COLOR #https://drsimonj.svbtle.com/visualising-residuals
# # # Same coloring as above, size corresponding as well
# #
# #
d <- dat.nona
d$predicted <- predict(fit.nona.total)
d$residuals <- residuals(fit.nona.total)
library(dplyr)
# #
# # ggplotRegression(fit.nona.paras) # for most simple model (parasitemia percentage)
# # #par(new=TRUE)
# # #ggplotRegression(fit.nona.total) # the same plot
# #
# # # Are the residuals of the linear regression model homoscedastic, ie the RVs have the same finite variance?
# # # SIZE AND COLOR #https://drsimonj.svbtle.com/visualising-residuals
# # # Same coloring as above, size corresponding as well
# #
# #
d <- dat.nona
d$predicted <- predict(glm.paras)
d$residuals <- residuals(glm.paras)
library(dplyr)
d %>% select(outcome, predicted, residuals) %>% head() # quick look at the actual, predicted and residual values
#head(d)
# ADD LEGEND HERE
ggplot(d, aes(x = Percentage.parasitemia, y = outcome)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = Percentage.parasitemia, yend = predicted), alpha = .2) +
# > Color AND size adjustments made here...
geom_point(aes(color = abs(residuals), size = abs(residuals))) + # size also mapped
scale_color_continuous(low = "black", high = "red") +
guides(color = FALSE, size = FALSE) +  # Size legend also removed
# <
geom_point(aes(y = predicted), shape = 1) +
theme_bw()
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras)))
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens.logit)))
length(dat$Parasite.density...µl.)
length(dat$Percentage.parasitemia)
ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens.logit)))
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
length(glm.paras.logit)
length(glm.paras.dens.logit)
ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens.logit)))
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
#ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens.logit)))
abline(1,otucome)
#ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens.logit)))
abline(1,outcome)
#ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens.logit)))
points(10,0.6)
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
#ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens.logit)))
points(10,0.6)
plot(,0.6)
lines(10,0.6)
lines(10,0.6, type=o)
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("percentage of pathogen reads")+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens)))
length(dat.nona)
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
# GLM REGRESSION LINE
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(fit.paras.logit)))
# GLM REGRESSION LINE
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(fit.paras.log)))
# GLM REGRESSION LINE
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(fit.paras)))
# GLM REGRESSION LINE
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(fit.paras.logit)))
#ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens)))
abline(h=0.6)
# GLM REGRESSION LINE
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
# GLM REGRESSION LINE
ggplot(dat.nona,aes(Percentage.parasitemia,outcome))+xlab("Parasitemia percentage")+ylab("Pathogen reads")+geom_point()+geom_line(aes(y=fitted(glm.paras.logit)))
#ggplot(dat.nona,aes(dat$Parasite.density...µl.,outcome))+geom_point()+geom_line(aes(y=fitted(glm.paras.dens)))
abline(h=0.6)
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
#===============================================================================
#                      REGRESSION PLOTS                                        #
#===============================================================================
# DEFINE NICE REGRESSION PLOT FUNCTION FOR SIMPLE MODEL
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5)), xlab = "Percentage of parasitemia", ylab = "Pathogen reads")
}
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
#===============================================================================
#                      REGRESSION PLOTS                                        #
#===============================================================================
# DEFINE NICE REGRESSION PLOT FUNCTION FOR SIMPLE MODEL
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5))) +
xlab = "Percentage of parasitemia" + ylab = "Pathogen reads"
}
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
#===============================================================================
#                      REGRESSION PLOTS                                        #
#===============================================================================
# DEFINE NICE REGRESSION PLOT FUNCTION FOR SIMPLE MODEL
ggplotRegression <- function (fit) {
#===============================================================================
#                      REGRESSION PLOTS                                        #
#===============================================================================
# DEFINE NICE REGRESSION PLOT FUNCTION FOR SIMPLE MODEL
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(xlab = "lab", ylab = "lab)") +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5))))
}
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
#===============================================================================
#                      REGRESSION PLOTS                                        #
#===============================================================================
# DEFINE NICE REGRESSION PLOT FUNCTION FOR SIMPLE MODEL
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = "lab", y = "lab)") +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adjusted R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope =",signif(fit$coef[[2]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5))))
}
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
# DEFINE NICE REGRESSION PLOT FUNCTION FOR COMPLEX MODEL, ie second variable
ggplotRegression2 <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[3], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adj R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope1 =",signif(fit$coef[[2]], 5),
"; Slope2 =",signif(fit$coef[[3]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5))) +
abline(h=0.6)
}
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
# DEFINE NICE REGRESSION PLOT FUNCTION FOR COMPLEX MODEL, ie second variable
ggplotRegression2 <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[3], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "blue") +
labs(title = paste("Adj R^2 = ",signif(summary(fit)$adj.r.squared, 5),
"; Intercept =",signif(fit$coef[[1]],5 ),
"; Slope1 =",signif(fit$coef[[2]], 5),
"; Slope2 =",signif(fit$coef[[3]], 5),
"; P-value =",signif(summary(fit)$coef[2,4], 5)))
}
#png("shinyapp2/img/fit_nona_paras_regression.png")
ggplotRegression(fit.nona.paras)
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
runApp('~/Documents/IMPERIAL/PROJECTS/project2/GITHUB/shinyapp4')
