geom_line(aes(x=age, y=fit_prob))
#predict gives the predicted value in terms of logits
plot.dat <- data.frame(prob = dat.nona$outcome,
parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.dat, aes(x=parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=age, y=fit_prob))
#predict gives the predicted value in terms of logits
plot.dat <- data.frame(outcome = dat.nona$outcome,
parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.dat, aes(x=parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=age, y=fit_prob))
#predict gives the predicted value in terms of logits
plot.dat <- data.frame(outcome = dat.nona$outcome,
parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.dat, aes(x=parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=parasitemia, y=fit_prob))
#predict gives the predicted value in terms of logits
plot.dat <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.dat, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
png("shinyapp2/img/glm_paras_logit_regression.png")
#predict gives the predicted value in terms of logits
plot.dat <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.dat$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.dat, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_logit_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.logit <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.logit$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras, dat.nona))
#convert those logit values to probabilities
plot.glm.paras$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.glm.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras, dat.nona))
#convert those logit values to probabilities
plot.glm.paras$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.glm, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_dens_logit_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.dens.logit <- data.frame(outcome = dat.nona$outcome,
Parasitemia.density = dat.nona$Parasite.density...µl.,
fit = predict(glm.paras.dens.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.dens.logit$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
# MODEL: 2.012e+00 + 2.031e-06*dat.nona$Parasite.density...µl.
glm.paras.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.paras.dens.logit)
par(mfrow = c(2, 2))
plot(glm.paras.dens.logit)
png("shinyapp2/img/glm_paras_dens_logit_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.dens.logit <- data.frame(outcome = dat.nona$outcome,
Parasitemia.density = dat.nona$Parasite.density...µl.,
fit = predict(glm.paras.dens.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.dens.logit$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.glm.paras.dens.logit, aes(x=Parasitemia.density, y=outcome)) +
geom_point() +
geom_line(aes(x=Parasitemia.density, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_dens_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.dens <- data.frame(outcome = dat.nona$outcome,
Parasitemia.density = dat.nona$Parasite.density...µl.,
fit = predict(glm.paras.dens, dat.nona))
# (1) GLM SIMPLE | DENSITY
glm.paras.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=quasibinomial, data=dat.nona)
summary(glm.paras.dens)
par(mfrow = c(2, 2))
plot(glm.paras.dens)
# MODEL: 2.012e+00 + 2.031e-06*dat.nona$Parasite.density...µl.
glm.paras.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.paras.dens.logit)
par(mfrow = c(2, 2))
plot(glm.paras.dens.logit)
#convert those logit values to probabilities
plot.glm.paras.dens.logit$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.glm.paras.dens.logit, aes(x=Parasitemia.density, y=outcome)) +
geom_point() +
geom_line(aes(x=Parasitemia.density, y=fit_prob))
png("shinyapp2/img/glm_paras_dens_logit_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.dens.logit <- data.frame(outcome = dat.nona$outcome,
Parasitemia.density = dat.nona$Parasite.density...µl.,
fit = predict(glm.paras.dens.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.dens.logit$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.glm.paras.dens.logit, aes(x=Parasitemia.density, y=outcome)) +
geom_point() +
geom_line(aes(x=Parasitemia.density, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_dens_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.dens <- data.frame(outcome = dat.nona$outcome,
Parasitemia.density = dat.nona$Parasite.density...µl.,
fit = predict(glm.paras.dens, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.dens$fit_prob <- plot.dat$fit
library(ggplot2)
ggplot(plot.glm.paras.dens, aes(x=Parasitemia.density, y=outcome)) +
geom_point() +
geom_line(aes(x=Parasitemia.density, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras, dat.nona))
#convert those logit values to probabilities
plot.glm.paras$fit_prob <- plot.glm.paras$fit
library(ggplot2)
ggplot(plot.glm, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
png("shinyapp2/img/glm_paras_logit_regression.png")
#predict gives the predicted value in terms of logits
plot.glm.paras.logit <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras.logit, dat.nona))
#convert those logit values to probabilities
plot.glm.paras.logit$fit_prob <- exp(plot.dat$fit)/(1+exp(plot.dat$fit))
library(ggplot2)
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
# (1) GLM SIMPLE | DENSITY
glm.paras.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=quasibinomial, data=dat.nona)
summary(glm.paras.dens)
par(mfrow = c(2, 2))
plot(glm.paras.dens)
# MODEL: 2.012e+00 + 2.031e-06*dat.nona$Parasite.density...µl.
glm.paras.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.paras.dens.logit)
par(mfrow = c(2, 2))
plot(glm.paras.dens.logit)
#predict gives the predicted value in terms of logits
plot.glm.paras <- data.frame(outcome = dat.nona$outcome,
Percentage.parasitemia = dat.nona$Percentage.parasitemia,
fit = predict(glm.paras, dat.nona))
#convert those logit values to probabilities
plot.glm.paras$fit_prob <- plot.glm.paras$fit
library(ggplot2)
ggplot(plot.glm.paras, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
library(ggplot2)
ggplot(plot.glms, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
library(ggplot2)
ggplot(plot.glm, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
library(ggplot2)
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
dev.off()
ggplot(plot.glm.paras.logit, aes(x=Percentage.parasitemia, y=outcome)) +
geom_point() +
geom_line(aes(x=Percentage.parasitemia, y=fit_prob))
# (1) GLM SIMPLE | DENSITY
glm.paras.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=quasibinomial, data=dat.nona)
summary(glm.paras.dens)
par(mfrow = c(2, 2))
plot(glm.paras.dens)
# MODEL: 2.012e+00 + 2.031e-06*dat.nona$Parasite.density...µl.
glm.paras.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.paras.dens.logit)
par(mfrow = c(2, 2))
plot(glm.paras.dens.logit)
beta_paras <- betareg(dat.nona$outcome ~ dat.nona$Percentage.parasitemia |  dat.nona$Percentage.parasitemia, data=dat.nona)
# # http://www.simonqueenborough.info/R/stats-basic/glm.html
# # http://www.simonqueenborough.info/R/statistics/glm-binomial
#
#
#
# # ------ BETA FUNCTIONS
# # Zeileis, Kleiber, and Jackman (2018): generalized count data regression
# # model shares some properties with generalized linear models (GLMs, McCullagh and Nelder 1989) like linear predictor, link function, dispersion parameter,
# # but it is not a special case of this framework.
#
library(betareg)
set.seed(123)
beta_paras <- betareg(dat.nona$outcome ~ dat.nona$Percentage.parasitemia |  dat.nona$Percentage.parasitemia, data=dat.nona)
beta_total <- betareg(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L. |  dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona)
#beta_total.log <- betareg(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L. |  dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona, link = "log")
beta_total.logit <- betareg(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L. |  dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona, link = "logit")
beta_total.loglog <- betareg(dat.nona$outcome ~ dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L. |  dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L., data=dat.nona, link = "loglog")
summary(beta_paras)
# MODEL: -1.86818 + 0.05910*dat.nona$Percentage.parasitemia, Pseudo R-squared: 0.2972
#summary(beta_total.log)
summary(beta_total)
# (1) GLM SIMPLE | DENSITY
glm.paras.dens <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl., family=quasibinomial, data=dat.nona)
summary(glm.paras.dens)
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
gg_miss_var(dat[,-c(23,24,25,27)])
# library(mice)
# par(las=2) # make label text perpendicular to axis
# #text(quantile(resS2$dif, 0.005), 5, "0.5% FP rate", pos = 2, cex = 0.6, srt = 90)
# md.pattern(dat) # returns a tabular form of missing value present in each variable in a dataset
# # 21 observations with no missing values
# # (5 missing values in mean cell volume
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
library(visdat)
gg_miss_var(dat[,-c(23,24,25,27)])
# #text(quantile(resS2$dif, 0.005), 5, "0.5% FP rate", pos = 2, cex = 0.6, srt = 90)
# md.pattern(dat) # returns a tabular form of missing value present in each variable in a dataset
# # 21 observations with no missing values
# # (5 missing values in mean cell volume
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("GITHUB/shinyapp2/img/missingData.#png")
vis_miss(dat[,-c(23,24,25,27)])
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("GITHUB/shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
# # ##png("GITHUB/shinyapp2/img/missingData2.#png")
gg_miss_var(dat[,-c(23,24,25,27)])
#
# library(visdat)
# ###png("GITHUB/shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
# # ##png("GITHUB/shinyapp2/img/missingData2.#png")
# # gg_miss_var(dat[,-c(23,24,25,27)])
# # dev.off
#
library(naniar)
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("GITHUB/shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
# # ##png("GITHUB/shinyapp2/img/missingData2.#png")
gg_miss_var(dat[,-c(23,24,25,27)])
# # (5 missing values in mean cell volume
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("GITHUB/shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
png("GITHUB/shinyapp2/img/missingData2.png")
gg_miss_var(dat[,-c(23,24,25,27)])
dev.off
# # (5 missing values in mean cell volume
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("GITHUB/shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
png("GITHUB/shinyapp2/img/missingData2.png")
gg_miss_var(dat[,-c(23,24,25,27)])
dev.off
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
# # ##png("shinyapp2/img/missingData2.#png")
gg_miss_var(dat[,-c(23,24,25,27)])
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
# # ##png("shinyapp2/img/missingData2.#png")
gg_miss_var(dat[,-c(23,24,25,27)])
# # (5 missing values in mean cell volume
# # 8 missing values in parasite clones
# # 3 missing values in lactate
# # 2 missing values in mean cell and parasite clones..)
#
# library(visdat)
# ###png("shinyapp2/img/missingData.#png")
# vis_miss(dat[,-c(23,24,25,27)])
# #dev.off()
#
png("shinyapp2/img/missingData2.#png")
gg_miss_var(dat[,-c(23,24,25,27)])
dev.off
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
runApp('shinyapp2/shinyApp.R')
library(caret)
library(doParallel)
registerDoParallel(detectCores() - 1)
# read in files
devStages <- read.csv("~/Documents/IMPERIAL/PROJECTS/project2/data/pf_SPVs.csv")
# merge data sets (by samples/ subjectID)
dat_devStages <- merge(dat, devStages, by.y = "samples", by.x = "Subject.ID")
# most important non-categorical variables
#dat.nc <- subset(dat, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Red.blood.cell.count..x1012.L, outcome))
dat_devStages.nc <- subset(dat_devStages, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, Percentage.neutrophils, outcome))
dat_devStages.nc.logit <- subset(dat_devStages, select = c(Subject.ID, Percentage.parasitemia, Total.White.Cell.Count..x109.L., Percentage.lymphocytes, Percentage.monocytes, Percentage.neutrophils, outcome.logit))
# drop the samples that have blanks
dat_devStages.nona <- na.omit(dat_devStages) # ONLY 21 OBSERVATIONS ANYMORE
dat_devStages.nc.nona <- na.omit(dat_devStages.nc)
dat.nc.nona.logit <- na.omit(dat_devStages.nc.logit)
# CORRPLOT
my_matrix2 <- dat_devStages.nona[,-c(1,2,16,23,24)]
M2 <- cor(my_matrix2, method="pearson")
corrplot(M2, method = "square") ### PLOT FOR WEBSITE
corrplot(M2, order = "AOE")
corrplot(M2, order = "hclust") # FOR WEBSITE
corrplot(M2, order = "FPC")
corrplot(M2, order = "alphabet")
dev.new(width=5, height=4)
corrplot(M2, order = "hclust", addrect = 2) # !!!!!!!!!
# INTERESTING PLOTS
plot.ts(t(M2sub)[,c(3,5,6,8,10,12)])
# drop the samples that have blanks
dat_devStages.nona <- na.omit(dat_devStages) # ONLY 21 OBSERVATIONS ANYMORE
dat_devStages.nc.nona <- na.omit(dat_devStages.nc)
dat.nc.nona.logit <- na.omit(dat_devStages.nc.logit)
# CORRPLOT
my_matrix2 <- dat_devStages.nona[,-c(1,2,16,23,24)]
M2 <- cor(my_matrix2, method="pearson")
corrplot(M2, method = "square") ### PLOT FOR WEBSITE
corrplot(M2, order = "AOE")
corrplot(M2, order = "hclust") # FOR WEBSITE
corrplot(M2, order = "FPC")
corrplot(M2, order = "alphabet")
dev.new(width=5, height=4)
corrplot(M2, order = "hclust", addrect = 2) # !!!!!!!!!
M2sub <- subset(M2, select = c(X0hour, X24hour, X48hour, Gam5))
#dev.new(width=10, height=10)
heatmap(M2sub, legend=c("col")) # !!!!!!!!!
plot.ts(t(M2sub)[,3:7])
plot.ts(t(M2sub)[,8:13])
plot.ts(t(M2sub)[,c(14,15,16,17,18,19,21,22)])
plot.ts(t(M2sub)[,23:26])
# INTERESTING PLOTS
plot.ts(t(M2sub)[,c(3,5,6,8,10,12)])
plot.ts(t(M2sub)[,c(13,14,15,16,17,18)])
# INTERESTING PLOTS
plot.ts(t(M2sub)[,c(3,5,6,8,10,12)])
# (2a) GLM COMPLEX | PERCENTAGE | DIFFERENT TYPES OF WHITE BLOOD CELLS COUNTS
glm.total <-glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=quasibinomial, data=dat.nona)
summary(glm.total.counts)
par(mfrow = c(2, 2))
plot(glm.total.counts)
# (2a) GLM COMPLEX | PERCENTAGE | TOTAL WHITE BLOOD CELLS
glm.total <-glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia + dat.nona$Total.White.Cell.Count..x109.L., family=quasibinomial, data=dat.nona)
summary(glm.total)
# (2a) GLM COMPLEX | PERCENTAGE | DIFFERENT TYPES OF WHITE BLOOD CELLS COUNTS
glm.total.counts <-glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=quasibinomial, data=dat.nona)
summary(glm.total.counts)
par(mfrow = c(2, 2))
plot(glm.total.counts)
# MODEL: -1.06792 + 0.06155*dat.nona$Percentage.parasitemia + (-0.58256)*dat.nona$Lymphocyte.count...x109.L. + 2.89776*dat.nona$Monocyte.count...x109.L. + (-0.16340)*dat.nona$Neutrophil.count...x109.L.
glm.total.counts.logit <- glm(outcome_prop.nona ~ dat.nona$Percentage.parasitemia + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.total.counts.logit)
par(mfrow = c(2, 2))
plot(glm.total.counts.logit)
# (2a) GLM COMPLEX | DENSITY | DIFFERENT TYPES OF WHITE BLOOD CELLS COUNTS
glm.total.counts.dens <-glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=quasibinomial, data=dat.nona)
summary(glm.total.counts.dens)
par(mfrow = c(2, 2))
plot(glm.total.counts.dens)
# (2a) GLM COMPLEX | DENSITY | DIFFERENT TYPES OF WHITE BLOOD CELLS COUNTS
glm.total.counts.dens <-glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=quasibinomial, data=dat.nona)
summary(glm.total.counts.dens)
par(mfrow = c(2, 2))
# MODEL: -1.129e+00 + 1.744e-06*dat.nona$Parasite.density...µl. + (-4.876e-01)*dat.nona$Lymphocyte.count...x109.L. + 2.639e+00*dat.nona$Monocyte.count...x109.L. + (-1.666e-01)*dat.nona$Neutrophil.count...x109.L.
glm.total.counts.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.total.counts.dens.logit)
par(mfrow = c(2, 2))
plot(glm.total.counts.dens.logit)
# (2a) GLM COMPLEX | DENSITY | DIFFERENT TYPES OF WHITE BLOOD CELLS COUNTS
glm.total.counts.dens <-glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=quasibinomial, data=dat.nona)
summary(glm.total.counts.dens)
par(mfrow = c(2, 2))
plot(glm.total.counts.dens)
# MODEL: -1.129e+00 + 1.744e-06*dat.nona$Parasite.density...µl. + (-4.876e-01)*dat.nona$Lymphocyte.count...x109.L. + 2.639e+00*dat.nona$Monocyte.count...x109.L. + (-1.666e-01)*dat.nona$Neutrophil.count...x109.L.
glm.total.counts.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.total.counts.dens.logit)
par(mfrow = c(2, 2))
plot(glm.total.counts.dens.logit)
runApp('shinyapp2/shinyApp.R')
runApp('shinyApp.R')
# (2a) GLM COMPLEX | DENSITY | DIFFERENT TYPES OF WHITE BLOOD CELLS COUNTS
glm.total.counts.dens <-glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=quasibinomial, data=dat.nona)
summary(glm.total.counts.dens)
# MODEL: -1.129e+00 + 1.744e-06*dat.nona$Parasite.density...µl. + (-4.876e-01)*dat.nona$Lymphocyte.count...x109.L. + 2.639e+00*dat.nona$Monocyte.count...x109.L. + (-1.666e-01)*dat.nona$Neutrophil.count...x109.L.
glm.total.counts.dens.logit <- glm(outcome_prop.nona ~ dat.nona$Parasite.density...µl. + dat.nona$Lymphocyte.count...x109.L. + dat.nona$Monocyte.count...x109.L. + dat.nona$Neutrophil.count...x109.L., family=binomial(link = 'logit'), data=dat.nona)
summary(glm.total.counts.dens.logit)
par(mfrow = c(2, 2))
plot(glm.total.counts.dens.logit)
runApp('shinyApp.R')
Missing
Missing
runApp('shinyApp.R')
